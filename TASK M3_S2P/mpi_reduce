#include <mpi.h>
#include <stdio.h>
#include <stdlib.h>

#define ARRAY_SIZE 1000

int main(int argc, char** argv) {
    int rank, size, i;
    int* v1, *v2, *v3;

    v1 = (int*)malloc(ARRAY_SIZE * sizeof(int));
    v2 = (int*)malloc(ARRAY_SIZE * sizeof(int));
    v3 = (int*)malloc(ARRAY_SIZE * sizeof(int));

    srand(time(NULL));
    for (i = 0; i < ARRAY_SIZE; i++) {
        v1[i] = rand() % 1000;
        v2[i] = rand() % 1000;
    }

    MPI_Init(&argc, &argv);
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
    MPI_Comm_size(MPI_COMM_WORLD, &size);

    double start_time, end_time;
    start_time = MPI_Wtime();

    // Split the arrays into equal parts for each process
    int local_size = ARRAY_SIZE / size;
    int* local_v1 = (int*)malloc(local_size * sizeof(int));
    int* local_v2 = (int*)malloc(local_size * sizeof(int));
    int* local_v3 = (int*)malloc(local_size * sizeof(int));
    MPI_Scatter(v1, local_size, MPI_INT, local_v1, local_size, MPI_INT, 0, MPI_COMM_WORLD);
    MPI_Scatter(v2, local_size, MPI_INT, local_v2, local_size, MPI_INT, 0, MPI_COMM_WORLD);

    // Compute the sum of local vectors on each process
    for (i = 0; i < local_size; i++) {
        local_v3[i] = local_v1[i] + local_v2[i];
    }

    // Reduce the sum of each process to get the total sum
    int* global_v3 = NULL;
    if (rank == 0) {
        global_v3 = (int*)malloc(ARRAY_SIZE * sizeof(int));
    }
    MPI_Gather(local_v3, local_size, MPI_INT, global_v3, local_size, MPI_INT, 0, MPI_COMM_WORLD);

    if (rank == 0) {
        int total_sum = 0;
        for (i = 0; i < ARRAY_SIZE; i++) {
            total_sum += global_v3[i];
        }
        printf("The total sum is: %d\n", total_sum);
        free(global_v3);
    }

    end_time = MPI_Wtime();

    if (rank == 0) {
        printf("Execution time: %f seconds\n", end_time - start_time);
    }

    free(v1);
    free(v2);
    free(v3);
    free(local_v1);
    free(local_v2);
    free(local_v3);

    MPI_Finalize();
}